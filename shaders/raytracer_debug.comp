#version 460 core

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (rgba32f, binding = 0) uniform image2D render_texture;
layout (rgba32f, binding = 1) uniform image2D debug_texture;
layout (rgba32f, binding = 2) uniform image2D skybox_texture;

layout (location = 0) uniform float time;

layout (location = 1) uniform mat4 camera_view;
layout (location = 2) uniform bool orthographic;
layout (location = 3) uniform bool incremental_rendering;
layout (location = 5) uniform float near_plane;
layout (location = 6) uniform float far_plane;
layout (location = 7) uniform int rng_seed;

layout (location = 9) uniform int n_spheres;

layout (std430, binding = 10) buffer Pos { vec4 positions[]; };
layout (std430, binding = 11) buffer Rad { float radius[]; };
layout (std430, binding = 12) buffer MatType { int material_type[]; };
layout (std430, binding = 13) buffer Col { vec4 albedo[]; };
layout (std430, binding = 14) buffer Rou { float roughness[]; };

layout (location = 20) uniform vec3  look_from;
layout (location = 21) uniform vec3  look_at;
layout (location = 22) uniform float vfov;
layout (location = 23) uniform float pitch;
layout (location = 24) uniform float yaw;

#define MATERIAL_DIFFUSE    1
#define MATERIAL_METAL      2
#define MATERIAL_DIELECTRIC 3
#define MATERIAL_LIGHT      5

uint rng_state;
const float PI = 3.14159265f;

#define N_BOUNCES 10
#define N_SAMPLES 10

struct hit_t {
  bool  hit;
  vec3  normal;
  vec3  position;
  float distance;
  int   id;
};

uint rand_xorshift() {
  rng_state ^= (rng_state << 13);
  rng_state ^= (rng_state >> 17);
  rng_state ^= (rng_state << 5);
  return rng_state;
}


float rand() {
  return float(rand_xorshift()) / 4294967296.0;
}

vec3 random_vec3() {
  return vec3(rand(), rand(), rand()) * 2.0 - 1.0;
}

vec4 random_vec4() {
  return vec4(rand(), rand(), rand(), rand()) * 2.0 - 1.0;
}

// https://www.shadertoy.com/view/WttXWX
uint hash_lowbias32(uint x) {
  x ^= x >> 16;
  x *= 0x7feb352dU;
  x ^= x >> 15;
  x *= 0x846ca68bU;
  x ^= x >> 16;
  return x;
}

vec3 sample_lambert(vec3 normal) {
  vec3 lambert = normal + random_vec3();

  // Handle degenerate rays
  if (dot(lambert, lambert) < 0.001)
    lambert = normal;

  return normalize(lambert);
}

float length_squared(vec3 v) {
  return dot(v, v);
}

vec3 refract(vec3 ray_direction, vec3 normal, float refraction_ratio) {
  float cos_theta = min(dot(-ray_direction, normal), 1.0);
  vec3 r_out_perp =  refraction_ratio * (ray_direction + normal * cos_theta);
  vec3 r_out_parallel = -sqrt(abs(1.0 - length_squared(r_out_perp))) * normal;
  return r_out_perp + r_out_parallel;
}

float schlick(float cosine, float refraction_ratio) {
    float r0 = (1.0 - refraction_ratio) / (1.0 + refraction_ratio);
    r0 = r0 * r0;
    return r0 + (1.0 - r0) * pow((1.0 - cosine), 5.0);
}

bool test_sphere_hit(float max_distance, vec3 ray_origin, vec3 ray_direction, int sphere_id, out hit_t hit_info) {
  vec4 position = positions[sphere_id];
  vec3 omc = ray_origin - position.xyz;
  float a = dot(ray_direction, ray_direction);
  float b = dot(omc, ray_direction);
  float c = dot(omc, omc) - radius[sphere_id] * radius[sphere_id];
  float discriminant = b * b - a * c;

  if (discriminant < 0.0)
    return false;

  float t = (-b - sqrt(discriminant)) / a;
  if (t >= near_plane && t <= max_distance) {
    hit_info.hit = true;
    hit_info.position = ray_origin + ray_direction * t;
    hit_info.normal = normalize(hit_info.position - position.xyz);
    hit_info.distance = t;
    hit_info.id = sphere_id;

    return true;
  } else {
    t = (-b + sqrt(discriminant)) / a;
    if (t >= near_plane && t <= max_distance) {
      hit_info.hit = true;
      hit_info.position = ray_origin + ray_direction * t;
      hit_info.normal = normalize(hit_info.position - position.xyz);
      hit_info.distance = t;
      hit_info.id = sphere_id;

      return true;
    }
  }

  return false;
}

bool test_ground_plane_hit(float max_distance, vec3 ray_origin, vec3 ray_direction, out hit_t hit_info) {
  float t = -ray_origin.y / ray_direction.y;

  if (t >= near_plane && t <= max_distance) {
    hit_info.hit      = true;
    hit_info.distance = t;
    hit_info.position = ray_origin + t * ray_direction;
    hit_info.normal   = vec3(0.0f, 1.0f, 0.0f);
    hit_info.id       = -1;

    return true;
  }

  return false;
}

bool cast_ray(vec3 ray_origin, vec3 ray_direction, out hit_t hit_info) {
  float hit_distance  = far_plane;
  bool  hit_something = false;

  // if (test_ground_plane_hit(hit_distance, ray_origin, ray_direction, hit_info)) {
  //   hit_distance  = hit_info.distance;
  //   hit_something = true;
  // }

  for (int sphere_id = 0; sphere_id < n_spheres; sphere_id++) {
    if (test_sphere_hit(hit_distance, ray_origin, ray_direction, sphere_id, hit_info)) {
      hit_distance  = hit_info.distance;
      hit_something = true;
    }
  }

  return hit_something;
}

// https://gist.github.com/yiwenl/3f804e80d0930e34a0b33359259b556c
mat4 rotation_matrix(vec3 axis, float angle) {
  axis     = normalize(axis);
  float s  = sin(angle);
  float c  = cos(angle);
  float oc = 1.0 - c;

  return mat4(
    oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
    0.0,                                0.0,                                0.0,                                1.0
  );
}

vec3 rotate(vec3 v, vec3 axis, float angle) {
  mat4 m = rotation_matrix(axis, angle);
  return (m * vec4(v, 1.0)).xyz;
}

void main() {
  rng_state = hash_lowbias32(gl_GlobalInvocationID.x * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x) + rng_seed;

  vec4  pixel_color    = vec4(0.0, 0.0, 0.0, 1.0);
  ivec2 pixel_position = ivec2(gl_GlobalInvocationID.xy);
  ivec2 texture_size   = imageSize(render_texture);
  vec2  pixel_size     = vec2(1.0 / float(texture_size.x), 1.0 / float(texture_size.y));
  vec4  old_color      = imageLoad(render_texture, pixel_position);
  float aspect_ratio   = float(texture_size.x) / float(texture_size.y);
  float max_y          = 5.0;
  float max_x          = max_y * aspect_ratio;

  imageStore(debug_texture, pixel_position, vec4(0.0, 0.0, 0.0, 1.0));

  for (int i_sample = 0; i_sample < N_SAMPLES; i_sample++) {
    // Ray sample output color
    // Alpha channel is used for progressive rendering
    vec4 result        = vec4(1.0, 1.0, 1.0, 0.0);

    // Build a x,y in clip space (ie -1 to 1)
    float x = (float(pixel_position.x * 2 - texture_size.x) / texture_size.x);
    float y = (float(pixel_position.y * 2 - texture_size.y) / texture_size.y);

    // Apply antialiasing noise
    x += rand() * pixel_size.x;
    y += rand() * pixel_size.y;

    // Poor man's camera math
    vec3 ray_origin    = vec3(0.0, 0.0, 0.0);
    vec3 ray_direction = normalize(vec3(x * max_x, y * max_y, -10.0));
    ray_direction      = rotate(ray_direction, vec3(-1, 0, 0), radians(pitch));
    ray_direction      = rotate(ray_direction, vec3(0, 1, 0), radians(yaw + 90));
    ray_origin        += look_from;

    for (int i = 0; i < N_BOUNCES; i++) {
      hit_t hit_info = hit_t(false, vec3(0.0), vec3(0.0), 0.0, 0);

      if (!cast_ray(ray_origin, ray_direction, hit_info)) {
        float t = 0.5 * (ray_direction.y + 1.0);
        vec3 sky_color = (1.0 - t) * vec3(1.0) + t * vec3(0.5, 0.7, 1.0);
        result.rgb *= sky_color;
        break;
      }

      int material_type = material_type[hit_info.id];
      if (material_type == MATERIAL_DIFFUSE) {
        // Diffuse Material

        // FIXME: No idea what is going on with the cossine rule here. Maybe
        // missing the camera view matrix? Feels super weird to need to invert
        // the normal around.
        result.rgb *= albedo[hit_info.id].rgb * dot(-hit_info.normal, ray_direction);
        ray_direction = sample_lambert(hit_info.normal);

        if (i == 0) {
          vec4 normal_color = vec4(hit_info.normal * 0.5 + 0.5, 1.0);
          imageStore(debug_texture, pixel_position, normal_color);
        }
      } else if (material_type == MATERIAL_METAL) {
        // Metal
        result.rgb *= albedo[hit_info.id].rgb * dot(-hit_info.normal, ray_direction);
        ray_direction = reflect(ray_direction, hit_info.normal);
        vec3 fuzz = random_vec3() * roughness[hit_info.id];

        // Make sure that the fuzz doesn't push the ray inside the object at glancing angles
        if (dot(fuzz, hit_info.normal) < 0.0)
          fuzz = -fuzz;

        ray_direction = normalize(ray_direction + fuzz);
      } else if (material_type == MATERIAL_DIELECTRIC) {
        // Dieletric Material

        // NOTE: Not sure if it makes sense for a glass material to have an
        // albedo. There are colored glasses in real life, so maybe?
        result.rgb *= albedo[hit_info.id].rgb;
        vec3 normal = hit_info.normal;

        // We reuse the roughness parameter to store the refraction index
        float refraction_ratio = roughness[hit_info.id];

        if (dot(ray_direction, normal) > 0.0) {
          normal = -normal;
        } else {
          refraction_ratio = 1.0 / refraction_ratio;
        }

        float cos_theta = min(dot(-ray_direction, normal), 1.0);
        float sin_theta = sqrt(1.0 - cos_theta * cos_theta);
        bool cannot_refract = refraction_ratio * sin_theta > 1.0;

        if (cannot_refract || schlick(cos_theta, refraction_ratio) > rand()) {
          ray_direction = reflect(ray_direction, normal);
        } else {
          ray_direction = refract(ray_direction, normal, refraction_ratio);
        }
      } else if (material_type == MATERIAL_LIGHT) {
        // Light
        result.rgb += albedo[hit_info.id].rgb;

        imageStore(debug_texture, pixel_position, vec4(hit_info.normal * 0.5 + 0.5, 1.0));
        // After a ray hits a light, it stops there (since the ray is actually
        // going backwards, it means that the ray started at the light and
        // ended at the camera)
        break;
      }

      ray_origin = hit_info.position + hit_info.normal * 0.001;
    }

    pixel_color.rgb += (result.rgb) / float(N_SAMPLES);
  }

  vec4 final_color = vec4((old_color + pixel_color).rgb, old_color.a + 1);
  if (time < 0.1 || !incremental_rendering)
    final_color = pixel_color;

  imageStore(render_texture, pixel_position, final_color);
}
