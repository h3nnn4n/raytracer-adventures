#version 460 core

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (rgba32f, binding = 0) uniform image2D imgOutput;
layout (location = 0) uniform float time;

struct sphere_t {
  vec3 position;
  float radius;
  vec3 color;
};


void main() {
  vec4 value = vec4(0.0, 0.0, 0.0, 0.0);
  ivec2 pixel_position = ivec2(gl_GlobalInvocationID.xy);
  ivec2 texture_size = imageSize(imgOutput);

  sphere_t spheres[3] = {
    {
      vec3(0, 0, -10),
        1.0,
        vec3(1.0, 0.0, 0.0)
    },
    {
      vec3(2, 0, -8),
      1.0,
      vec3(0.0, 1.0, 0.0)
    },
    {
      vec3(0, 1, -10),
      1.0,
      vec3(0.0, 0.0, 1.0)
    },
  };

  float aspect_ratio = float(texture_size.x) / float(texture_size.y);
  float max_y = 5.0;
  float max_x = max_y * aspect_ratio;

  float x = (float(pixel_position.x * 2 - texture_size.x) / texture_size.x);
  float y = (float(pixel_position.y * 2 - texture_size.y) / texture_size.y);
  vec3 ray_o = vec3(x * max_x, y * max_y, 0.0);
  vec3 ray_d = vec3(0.0, 0.0, -1.0); // ortho

  for (int i = 0; i < 3; i++) {
    vec3 omc = ray_o - spheres[i].position;
    float b = dot(ray_d, omc);
    float c = dot(omc, omc) - spheres[i].radius * spheres[i].radius;
    float bsqmc = b * b - c;

    if (bsqmc >= 0.0) {
      value.xyz = spheres[i].color;
      break;
    }
  }

  imageStore(imgOutput, pixel_position, value);
}
